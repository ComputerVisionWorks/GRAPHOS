#include "TapiocaFinishedProcess.h"
#include <QMessageBox>
#include "MicMac/TapiocaIO.h"
#include "PWMatchesCategory.h"
#include <QMessageBox>
using namespace PW;



TapiocaFinishedProcess::TapiocaFinishedProcess(PW::Project *project,int minimumMatches,QString tiepointsMetadata):mProject(project),mMinimumMatches(minimumMatches),mTiepointsMetadata(tiepointsMetadata)
{
}

TapiocaFinishedProcess::~TapiocaFinishedProcess()
{

}

void TapiocaFinishedProcess::run(){

    //Check results exists;
    QString sourceFolder=mProject->getPreProcessingPath()+"/"+TAPIOCA_MATCHES_ORIGINAL_PATH;
    QDir sourceDir(sourceFolder);
    if (!sourceDir.exists()) {
        //Cancell process
        return;
    }

    QString strEngine="Tapioca-MicMac";// getTiePointsDialog()->getEngine();
    QString pairsFileName ="tapioca";
    bool isFileMode=false;
    if(!pairsFileName.isEmpty())
    {
        isFileMode=true;
    }
    // Process metadata:
    QString tapiocaMode;
    int tapiocaSize = 0;
    int tapiocaRange =0;

//    tapiocaMode = mTiePointsMethod.value("SearchMethod");
//    if (tapiocaMode.compare("Line")) {
//        tapiocaRange=mTiePointsMethod.value("Range").toInt();
//    }

//    tapiocaSize = mTiePointsMethod.value("ResizeValue").toInt();

//    mProject->removeProcessMetadata("Model");
//    mProject->removeProcessMetadata("Orientations");
//    mProject->removeProcessMetadata("TiePoints");
//    mProject->setProcessMetadataElement("TiePoints", "Tool", TAPIOCA_MICMAC_ENGINE_TAG);
//    mProject->setProcessMetadataElement("TiePoints", "SearchMode", tapiocaMode );
//    if(isFileMode)
//        mProject->setProcessMetadataElement("TiePoints", "PairsFile",pairsFileName);
//    if(tapiocaMode.compare(MICMACPARAMETERSDEFINITIONS_TAPIOCA_MODE_LINE,Qt::CaseInsensitive)==0)
//        mProject->setProcessMetadataElement("TiePoints", "Range", QString::number(tapiocaRange));
//    mProject->setProcessMetadataElement("TiePoints", "Size", QString::number(tapiocaSize));
    // Mover las carpetas


    QString matchesFolder=mProject->getBasePath()+"/"+MATCHING_PATH;
    QDir matchesDir(matchesFolder);

    //        // Eliminar las carpetas matches previos
    if(matchesDir.exists())
        LibPW::removeDir(matchesDir.absolutePath());

    if(!matchesDir.exists())
    {
        if(!QDir().mkdir(matchesDir.absolutePath()))
        {
            QString title="MainWindow::onTiePointsFinished";
            QString strError=tr("Error making directory:\n %1").arg(matchesFolder);
//            QMessageBox::critical(this,title,strError);
            return;
        }
    }
    QString targetFolder=mProject->getBasePath()+"/"+MATCHING_PATH+"/tapioca";
    QDir targetDir(targetFolder);
    if (!targetDir.exists()) {
        QDir().mkdir(targetDir.absolutePath());
    }

    if(!LibPW::copyDir(sourceDir.absolutePath(),targetDir.absolutePath()))
    {
        QString title="MainWindow::onTiePointsFinished";
        QString strError=tr("Error moving Tapioca matching files");
//        QMessageBox::critical(this,title,strError);
        return;
    }

    //Remove image conections under minimum matchings limit
    int minimumTapiocaMatches = mMinimumMatches;
//        QDir targetDir(mProject->getBasePath()+"/"+MATCHING_PATH+"/tapioca");

    QFileInfoList files = targetDir.entryInfoList(QDir::NoDotAndDotDot | QDir::AllDirs);
    foreach (QFileInfo file, files){
        if (file.isDir()){
            QDir pastisDir(file.absoluteFilePath());
            QFileInfoList matchesFiles = pastisDir.entryInfoList(QDir::NoDotAndDotDot | QDir::Files);
            foreach (QFileInfo matchesFileInfo, matchesFiles){
                if (!matchesFileInfo.isDir()){
                    //Read the lines and remove the file if nLines<minimumTapiocaMatches
                    int points=0;
                    QFile matchesFile(matchesFileInfo.absoluteFilePath());
                    if (matchesFile.open(QIODevice::ReadOnly))
                    {
                       QTextStream in(&matchesFile);
                       while (!in.atEnd())
                       {
                            in.readLine();
                            points++;
                            if (points>=minimumTapiocaMatches) {
                                matchesFile.close();
                                break;
                            }
                       }
                       if (points<minimumTapiocaMatches) {
                           matchesFile.remove();
                       }
                    }
                }
            }
        }
    }

    QString pastisFolder=mProject->getPreProcessingPath()+"/"+TAPIOCA_PASTIS_PATH;
    QDir pastisDir(pastisFolder);
    if(!LibPW::removeDir(pastisDir.absolutePath()))
    {
        QString title="MainWindow::onTiePointsFinished";
        QString strError=tr("Error removing Tapioca pastis folder:\n%1").arg(pastisFolder);
//        QMessageBox::critical(this,title,strError);
        return;
    }
    QString tmpMMFolder=mProject->getPreProcessingPath()+"/"+TAPIOCA_TMP_MM_PATH;
    QDir tmpMMDir(tmpMMFolder);
    if(!LibPW::removeDir(tmpMMDir.absolutePath()))
    {
        QString title="MainWindow::onTiePointsFinished";
        QString strError=tr("Error removing Tapioca tmp-MM folder:\n%1").arg(tmpMMFolder);
//        QMessageBox::critical(this,title,strError);
        return;
    }

    mProject->setMatchingFormat(MATCHING_FORMAT_APERO_TXT);
    mProject->appendTiePointsSet("tapioca");
    mProject->setNeedToSave(true);



    QDateTime dateTime=QDateTime::currentDateTime();
    QString timeCalculation=dateTime.toString(LIBPW_DATETIME_STRING_FORMAT);

    PWMatchesCategory * category = new PWMatchesCategory(mProject,
                          0,
                          "tapioca",
                          mTiepointsMetadata,
                          timeCalculation);

    QMap<QString, QVector<QString> > imagePairs;
    TapiocaIO tapiocaIO;

    QDir matchingsDir(mProject->getBasePath()+"/"+MATCHING_PATH+"/tapioca");
    tapiocaIO.readImagePairs(matchingsDir.absolutePath(), imagePairs);
    PWGraphImages* graphImages=new PWGraphImages();
        QVector<QString> wallisImageNames = mProject->getImagesFileName();
        for (int i = 0; i < wallisImageNames.count(); ++i) {
            wallisImageNames[i]=wallisImageNames[i].split(".").at(0)+".tif";
        }
        if(!graphImages->createGraph(wallisImageNames,
                                      imagePairs))
         {
             //TODO: graphIsConnected=false; Â¿Que hacer?
         }


    category->setGraphImages(graphImages);
    category->setImagePairs(imagePairs);

    mProject->insertMatchesCategory(category); //Comprobar categorie
    mProject->setActiveTiePointsSet("tapioca");
    //Rename folders and files
    if (!QFileInfo(mProject->getImagesFileName().first()).suffix().contains("tif")) {

        QString matchesDirPath = mProject->getBasePath()+"/"+MATCHING_PATH+"/tapioca";
        QDir *matchesDir = new QDir(matchesDirPath);
        QFileInfoList infoList = matchesDir->entryInfoList();
        for (int j = 2; j < infoList.count(); ++j) {
            QString subfolderName = infoList[j].absoluteFilePath();
            subfolderName =subfolderName.split(".").at(0)+"."+mProject->getImagesFileName().at(0).split(".").at(1);
            LibPW::copyDir(infoList[j].absoluteFilePath(),subfolderName);
            LibPW::removeDir(infoList[j].absoluteFilePath());
            QDir *pastirDir = new QDir(subfolderName);
            QFileInfoList infoPastisList = pastirDir->entryInfoList();
            for (int k = 2; k < infoPastisList.count(); ++k) {
                QString pastisFileName = infoPastisList[k].absoluteFilePath();
                pastisFileName =pastisFileName.split(".tif.txt").at(0)+"."+mProject->getImagesFileName().at(0).split(".").at(1)+".txt";
                QFile::rename(infoPastisList[k].absoluteFilePath(), pastisFileName);
            }
        }
    }

    if(!mProject->isValidMatchedCategory(mTiepointsMetadata) || !TIEPOINTS_VALIDATE_SETS){
        //invalid subgraph

    }
    QString homolPath= mProject->getBasePath() + "/" + "Homol";
    QDir homolDir(homolPath);
    LibPW::removeDir(homolDir.absolutePath());
    //Copy "Homol" to project directory:
    if(!homolDir.exists())
    {
        if(!homolDir.mkdir(homolDir.absolutePath()))
        {
//            QMessageBox::critical(this,tr("GRAPHOS - Error"),tr("Error making homol dir"));
            return;
        }
    }
    QString sourceMatchesFolder=mProject->getBasePath()+"/"+MATCHING_PATH+"/"+mProject->getActiveTiePointsSet();

    QString targetMatchesFolder=mProject->getBasePath()+"/"+TAPIOCA_MATCHES_ORIGINAL_PATH;
    QDir souceMatchesDir(sourceMatchesFolder);
    QDir targetMatchesDir(targetMatchesFolder);
    while (!targetDir.exists()) {
        QDir().mkdir(targetDir.absolutePath());
    }

    if(!LibPW::copyDir(souceMatchesDir.absolutePath(),targetMatchesDir.absolutePath(),false))
    {
        QString title="MainWindow::onTiePointsFinished";
        QString strError=tr("Error moving matching files to Homol");
//        QMessageBox::critical(this,title,strError);
        return;
    }

}
