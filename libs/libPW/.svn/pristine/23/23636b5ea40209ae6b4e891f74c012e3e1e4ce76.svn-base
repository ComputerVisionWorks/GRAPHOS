#ifndef EXTERNALPROCESS_H
#define EXTERNALPROCESS_H

#include <QProcess>
#include <QFileSystemWatcher>
#include <QTimer>
#include <QFile>

#include "Process.h"

namespace PW{

class LIBPWSHARED_EXPORT ExternalProcess  : public Process
{
    Q_OBJECT

public:
    ExternalProcess(QString commandPath);
    ~ExternalProcess();

    virtual void start();
    virtual void wait();
    virtual bool isRunning();

    void setWorkingDir(QString workingDir);
    void setErroLogFile(QString filePath);
    void setStdOutputFilePath(QString filePath);
    void setStdErrorFilePath(QString filePath);
    qint64 write(const char *data);

    virtual QByteArray readStdout();
    virtual QByteArray readStderr();

public slots:
    virtual void stop();

protected:
    void run();

    QString mCommandPath;
    QString mWorkingDir;

protected slots:
    void onError(QProcess::ProcessError commandError);
    void onError(QString path);
    void onTimeout();

private slots:
    void on_newStdData();
    void on_newErrorData();
    void on_mProcessFinished(int code);

private:
    QProcess *mProcess;
    int mErrorFileSize;
    QString mErrorFilePath;
    QString mStdOutputFilePath;
    QString mStdErrorFilePath;
    QFile *mStdOutFile;
    QFile *mErrOutFile;
    QFileSystemWatcher *mErrorWatcher;
    QTimer mTimer;
    bool mRunning;

    void cascadeKill(Q_PID pid);
};
}
#endif // EXTERNALPROCESS_H
