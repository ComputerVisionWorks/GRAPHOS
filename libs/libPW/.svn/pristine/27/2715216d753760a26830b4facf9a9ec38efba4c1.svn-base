#include <QDir>
#include <QWaitCondition>
#include <QDebug>
#include <signal.h>

#include "ExternalProcess.h"

using namespace PW;

ExternalProcess::ExternalProcess(QString commandPath):
    mRunning(false)
{
//    mCommandPath = "\""+commandPath+"\"";
    mCommandPath = commandPath;
    setSteps(1);
    mProcess = new QProcess();
    mStdOutFile = new QFile();
    mErrOutFile = new QFile();
    mWorkingDir = "";
    mErrorFilePath = "pwErrors.log";
    QFileInfo fileInfo(mErrorFilePath);
    mErrorFileSize = fileInfo.size();
//    mProcess->setStandardErrorFile(mErrorFilePath);
//    mProcess->setStandardOutputFile(mErrorFilePath);

    mErrorWatcher = new QFileSystemWatcher(QStringList() << mErrorFilePath);

    connect(mErrorWatcher, SIGNAL(fileChanged(QString)),this,SLOT(onError(QString)));
    connect(this, SIGNAL(error(QProcess::ProcessError)),this,SLOT(onError(QProcess::ProcessError)));
    connect(mProcess,SIGNAL(readyReadStandardOutput()),this, SIGNAL(readyReadStandardOutput()));
    connect(mProcess,SIGNAL(readyReadStandardError()),this, SIGNAL(readyReadStandardError()));
    connect(mProcess,SIGNAL(readyReadStandardOutput()),this, SLOT(on_newStdData()));
    connect(mProcess,SIGNAL(readyReadStandardError()),this, SLOT(on_newErrorData()));
//    connect(&mTimer,SIGNAL(timeout()),this,SLOT(onTimeout()));
}

ExternalProcess::~ExternalProcess(){
    delete mProcess;
    delete mErrorWatcher;
    delete mStdOutFile;
    delete mErrOutFile;
}

void ExternalProcess::start()
{
    run();
}

void ExternalProcess::wait()
{
    mProcess->waitForFinished();
}

bool ExternalProcess::isRunning()
{
    return mRunning;
}

void PW::ExternalProcess::run()
{
    mRunning = true;

    //Open log files:
    mStdOutFile->setFileName(mStdOutputFilePath);
    if(mStdOutFile->exists())
        mStdOutFile->open(QFile::WriteOnly);
    mErrOutFile->setFileName(mStdErrorFilePath);
    if(mErrOutFile->exists())
        mErrOutFile->open(QFile::WriteOnly);

    QDir workingDir(mWorkingDir);
    if (workingDir.exists(mWorkingDir))
        mProcess->setWorkingDirectory(mWorkingDir);
    connect(mProcess,SIGNAL(finished(int)),this, SLOT(on_mProcessFinished(int)));
    emit statusChanged(0,getStartupMessage());
    mProcess->start(mCommandPath, mInputs);
}

void PW::ExternalProcess::setWorkingDir(QString workingDir)
{
    mWorkingDir = workingDir;
//    mWorkingDir = "\""+workingDir+"\"";
}

void PW::ExternalProcess::onError(QProcess::ProcessError commandError)
{
    stop();
    emit Process::error(1, mCommandPath);
}

void PW::ExternalProcess::onError(QString path)
{
    QFileInfo fileInfo(mErrorFilePath);
    int errorFileSize = fileInfo.size();
    if (errorFileSize > 0 && (errorFileSize - mErrorFileSize) < 0){
        stop();
        emit Process::error(1, mCommandPath);
    }
}

void ExternalProcess::onTimeout()
{
    mProcess->write("\n");
    mTimer.start(5000);
}

void ExternalProcess::on_newStdData()
{
    QByteArray array = readStdout();
    QString out(array);
    emit newStdData(out);
    if(mStdOutFile->exists()){
        mStdOutFile->write(array);
    }
}

void ExternalProcess::on_newErrorData()
{
    QByteArray array = readStderr();
    QString out(array);
    emit newErrorData(out);
    if(mErrOutFile->exists()){
        mErrOutFile->write(array);
    }
}

void ExternalProcess::on_mProcessFinished(int code)
{
    disconnect(mProcess,SIGNAL(finished(int)),this, SLOT(on_mProcessFinished(int)));
    emit statusChanged(1,getStartupMessage());
    mRunning = false;

    //Close log files:
    if(mStdOutFile->exists())
        mStdOutFile->close();
    if(mErrOutFile->exists())
        mErrOutFile->close();

    qDebug() << QString(" ************** Finishing: ") << mCommandPath <<
                QString(" ExitCode: ") << QString::number(code) << QString(" ExitCode: ") << this->objectName();
    emit finished();
}

void PW::ExternalProcess::stop()
{   
    Process::stop();
    cascadeKill(mProcess->pid());
    mProcess->kill();
}

void PW::ExternalProcess::setErroLogFile(QString filePath)
{
    mErrorWatcher->removePath(mErrorFilePath);
    mErrorFilePath = filePath;

    QFileInfo fileInfo(mErrorFilePath);
    mErrorFileSize = fileInfo.size();
//    mProcess->setStandardErrorFile(mErrorFilePath);

    mErrorWatcher->addPath(mErrorFilePath);
}

void PW::ExternalProcess::setStdOutputFilePath(QString filePath)
{
    mStdOutputFilePath = filePath;
//    mProcess->setStandardOutputFile(filePath);
}

void PW::ExternalProcess::setStdErrorFilePath(QString filePath)
{
    mStdErrorFilePath = filePath;
//    mProcess->setStandardErrorFile(filePath);
}

qint64 ExternalProcess::write(const char *data)
{
    return mProcess->write(data);
}

QByteArray ExternalProcess::readStdout()
{
    return mProcess->readAllStandardOutput();
}

QByteArray ExternalProcess::readStderr()
{
    return mProcess->readAllStandardError();
}

void ExternalProcess::cascadeKill(Q_PID pid){
#ifdef Q_OS_LINUX
    QProcess killer;
    QStringList params;
    params << "--ppid";
    params << QString::number(pid);
    params << "-o";
    params << "pid";
    params << "--noheaders";
    killer.start("/bin/ps",params,QIODevice::ReadOnly);
    if(killer.waitForStarted(-1))
    {
        if(killer.waitForFinished(-1))
        {
            QByteArray temp=killer.readAllStandardOutput();
            QString str=QString::fromLocal8Bit(temp);
            QStringList list=str.split("\n");

            for(int i=0;i<list.size();i++)
            {
                if(!list.at(i).isEmpty())
//                    ::kill(list.at(i).toInt(),SIGKILL);
                    cascadeKill(list.at(i).toInt());
            }
            ::kill(pid,SIGKILL);
        }
    }
#endif
}
