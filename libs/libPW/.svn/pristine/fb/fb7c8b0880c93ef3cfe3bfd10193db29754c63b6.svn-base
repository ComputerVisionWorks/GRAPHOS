
#include <QDir>
#include <QDomDocument>
#include <QDebug>

#include "PSMarkersIO.h"

using namespace PW;

PSMarkersIO::PSMarkersIO()
{
}

QList<PW::PW3dPoint> PSMarkersIO::read(QString url)
{
    QList<PW::PW3dPoint> points3D;
    return points3D;
}

QList<PW2dPoint *> PSMarkersIO::readImagePoints(QString url)
{
    QList<PW2dPoint *> list;
    return list;
}

QMap<QString, QList<PW2dPoint *> *> PSMarkersIO::readImagePointsByImage(QString url)
{
    QMap<QString, QList<PW2dPoint *> *> points;

    QDomDocument domDocument;

    QString errorStr;
    int errorLine;
    int errorColumn;

    QIODevice *device = new QFile(url);
    if (!domDocument.setContent(device, true, &errorStr, &errorLine,
                                &errorColumn)) {
        qCritical() << tr("Parse error at line %1, column %2:\n%3")
                    .arg(errorLine)
                    .arg(errorColumn)
                    .arg(errorStr);
        return points;
    }

    QMap<QString, QString> imageIDs;

    QDomElement root = domDocument.documentElement();

    if (root.tagName() != "document") {
        qCritical() << tr("The file is not an PS Markers file (1)");
        return points;
    }

    root = root.firstChildElement("chunk");
    if (root.tagName() != "chunk") {
        qCritical() << tr("The file is not an PS Markers file (2)");
        return points;
    }

    //-------------- Cameras IDs: -------------------------------
    QDomElement cameras = root.firstChildElement("cameras");
    if (cameras.tagName() != "cameras") {
        qCritical() << tr("The file is not an PS Markers file (3)");
        return points;
    }

    QDomElement child = cameras.firstChildElement("camera");
    if (child.tagName() != "camera") {
        qCritical() << tr("The file is not an PS Markers file (4)");
        return points;
    }
    while (child.tagName()=="camera"){
        imageIDs.insert(child.attribute("id") ,child.attribute("label"));
        child = child.nextSiblingElement("camera");
    }

    //-------------- Markers: -------------------------------
    QDomElement markers = root.firstChildElement("markers");
    if (cameras.tagName() != "cameras") {
        qCritical() << tr("The file is not an PS Markers file (5)");
        return points;
    }

    QDomElement marker = markers.firstChildElement("marker");
    if (marker.tagName() != "marker") {
        qCritical() << tr("The file is not an PS Markers file (6)");
        return points;
    }
    while (marker.tagName()=="marker"){
        QDomElement location = marker.firstChildElement("location");

        while (location.tagName()=="location"){
            QString imageLabel = imageIDs.value(location.attribute("camera_id"));
            if (!points.contains(imageLabel))
                points.insert(imageLabel,new QList<PW2dPoint *>());
            points.value(imageLabel)->append(new PW2dPoint(location.attribute("x").toDouble(),
                                                          location.attribute("y").toDouble(),
                                                          marker.attribute("label")));

            location = location.nextSiblingElement("location");
        }

        marker = marker.nextSiblingElement("marker");
    }

    return points;
}

int PSMarkersIO::write(QString url, QList<PW3dPoint *> *points)
{
    return 1;
}

int PSMarkersIO::writeImagePoints(QString url, QList<PWImage *> images)
{
    return 1;
}
